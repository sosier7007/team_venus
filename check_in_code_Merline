class RunGame:
    '''
    Class runs the game 

    Attributes:
    player1(): first player
    player2(): second player
    '''
    def __init__(self, player1, player2):
        self.gamestate = self.createRandomStartState(player1, player2)

    
    def runGame(self):
        '''
        Runs the game

        Args:
        player1(): player1 object
        player2(): player2 object
        '''

        # Starting with player 1
        currentPlayer = self.player1

        # Run game til 
        while not self.gameEnded():
            
            playerActions = self.gamestate.getActions(currentPlayer)
            action = input(f"Choose an move: {playerActions}")
            while not action in playerActions:
                action = input(f"Choose an move: {[a for a in playerActions]}")
        
            self.gamestate.turn(currentPlayer, action)
            
            self.gamestate.displayScores()

            if currentPlayer == self.player1:
                currentPlayer = self.player2
            else:
                currentPlayer = self.player1

    def gameEnded(self):
        '''
        Decides when the game is over

        Side effects:
            Returns the winning player if health is 10 or if hp is gone or 
            returns none where the game has not ended
        
        '''
        if self.gameState.player1.score == 10 or self.gameState.player2.score == 10:
            sc = {self.gameState.player1:self.gameState.player1.score, self.gameState.player2:self.gameState.player2.score}
            return max(sc, key = lambda x: sc[x])
        elif self.gameState.player1.health <= 0 or self.gameState.player2.health <= 0:
            sc = {self.gameState.player1:self.gameState.player1.health, self.gameState.player_2:self.gameState.player2.health}
            return max(sc, key = lambda x: sc[x])
        return None
    

    




    

    






